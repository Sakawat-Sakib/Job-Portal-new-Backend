
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// all enum types
enum Role {
  student
  recruiter
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

// Here all relations are one to many

// 1 to Many (User -> Company)
// 1 to Many (User -> Application)
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  fullName String 
  email String @unique
  phoneNumber String
  password String
  role Role @default(student)
  profileBio String?
  profileSkills String[]
  profileResume String?
  profileResumeOriginalName String?
  profileCompanyId String? @db.ObjectId
  profilePhoto String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  Company Company[]
  Job     Job[]
  Application Application[]
  Favourite Favourite[]
}



// 1 to Many (Company -> Job)
model Company{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  description String?
  website String?
  location String?
  logo String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  
  Job Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

}

model Job {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  requirements String[]
  salary Float
  location String
  jobType String
  experienceLevel String
  position Int
  companyId String @db.ObjectId
  company Company @relation(fields: [companyId], references: [id])
  createdById     String        @db.ObjectId
  user            User          @relation(fields: [createdById], references: [id])
  Application Application[]
  Favourite Favourite[]
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Application {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  applicantId String @db.ObjectId
  applicant User @relation(fields: [applicantId], references: [id])
  jobId String @db.ObjectId
  job Job @relation(fields: [jobId], references: [id])
  status ApplicationStatus @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Favourite{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  jobId String @db.ObjectId
  job Job @relation(fields: [jobId], references: [id])
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}


